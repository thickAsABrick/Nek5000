A 2D oscillating cylider example using the moving overlapping mesh 
implementation of Nek5000 (NeknekM)

TO BUILD:

    cp ~/nek5_svn/trunk/nek/makenek  .

    and, in the file "makenek", replace

         #PPLIST="?"

    with

         PPLIST="NEKNEK"

    Build using:   "makenek ocyl"

TO RUN:

    Two overlapping meshes are provided: ocyl.rea (mesh 
    containing the 2D cylinder) and outside.rea (background mesh).
    To run, at the command prompt type

      'neknek ocyl outside NP1 NP2',

    where NP1 is the number of processors for the 'ocyl' session
    and NP2 is the number of processors for the 'outside' session.
    For example, if NP1=2 and NP2=4, you would type
    'neknek inside outside 2 4'.

    The boundary conditions of the global domain are set to 'v' at 
    the inflow, 'O' at the outflow, and 'SYM' on the top and bottom 
    (these global BCs are expressed only in outside.rea). All 
    overlapping boundaries, including those of the moving domain, 
    use interface coonditions, 'int', and the boundary conditions 
    at all moving walls, the cylinder wall in this case, should be 
    set to 'mv'.

    Within the moving mesh .rea file (ocyl.rea) the IFSTRS and 
    IFMVBD flag must be set to 'T', and currently IFCHAR is not 
    supported so it must be set to 'F' in both .rea files. In this 
    example, frequency and amplitude of cylinder motion are also set 
    in the cyl.rea file:

      0.200000     p033  user: frequency of oscillation
      0.500000     p034  user: amplitude of oscillation

    Within the SIZE file, the moving mesh parameters must be set to 
    allocate arrays for the mesh velocities. 
 
      parameter (lx1m=lx1,ly1m=ly1,lz1m=lz1)
    
    Also note that only the Pn_Pn-2 formulation is currently 
    supported, thus in 2D:

      parameter (lx2=lx1-2)
      parameter (ly2=ly1-2)
      parameter (lz2=lz1  )


    Within the usrfile, a subroutine must be established to define 
    the velocities at each GLL point. In this example the 
    subroutine is entitled 'u_meshv'. Another routine 
    'my_mesh_velocity' loops through all GLL points and calls 
    'u_meshv' to assign a velocity to each point in the moving 
    subdomain. The 'my_mesh_velocity' subroutine is called every 
    timestep from within the 'userchk' subroutine. Fluid velocity 
    values at the moving wall corresponding to boundary conditions 
    'mv', are set from within the 'userbc' subroutine by calling 
    'u_meshv'. The 'userbc' subroutine also contains an if 
    statement to check if the boundary point has been flagged for 
    interpolation. The 'usrdat' subroutine contains parameters that 
    control the interface extrapolation order (ninter) and the 
    number of iterations that should be performed (ngeom). In 
    'usrdat2' the ifusermv and ifxyo are set to '.true.' so that 
    the velocity at each GLL can be prescribed by the user and to 
    ensure the output of coordinates. 'multimesh_create' is also 
    called from within 'usrdat2' to initialize multimesh 
    communications.

    This example determines the average lift and drag  
    coefficients on the oscillating cylinder. The average lift 
    coefficient given at the end of the logfile should be 
    close to zero (abs value about 1.e-03 with the current parameters), 
    and the average drag coefficient should be close to 2.1187 
    (2.11918 with the current parameters).

